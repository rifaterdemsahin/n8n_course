{
  "name": "Rate Limit Handling Workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "maxRetries",
              "value": "3"
            },
            {
              "name": "baseDelay",
              "value": "1000"
            },
            {
              "name": "maxDelay",
              "value": "30000"
            },
            {
              "name": "apiEndpoint",
              "value": "https://api.example.com/data"
            },
            {
              "name": "batchSize",
              "value": "10"
            }
          ]
        },
        "options": {}
      },
      "id": "set-rate-limit-config",
      "name": "Set Rate Limit Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [460, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "retryCount",
              "value": "0"
            },
            {
              "name": "currentDelay",
              "value": "={{$node['Set Rate Limit Configuration'].json.baseDelay}}"
            },
            {
              "name": "lastRequestTime",
              "value": "={{$now}}"
            },
            {
              "name": "requestId",
              "value": "={{Math.random().toString(36).substr(2, 9)}}"
            }
          ]
        },
        "options": {}
      },
      "id": "initialize-retry-state",
      "name": "Initialize Retry State",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "={{$node['Set Rate Limit Configuration'].json.apiEndpoint}}",
        "options": {
          "headers": {
            "User-Agent": "n8n-rate-limit-demo",
            "X-Request-ID": "={{$json.requestId}}"
          },
          "timeout": 10000,
          "retry": {
            "enabled": false
          }
        }
      },
      "id": "make-api-request",
      "name": "Make API Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{$json.statusCode}}",
              "rightValue": 429,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-rate-limit-error",
      "name": "Check Rate Limit Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{parseInt($json.retryCount)}}",
              "rightValue": "={{parseInt($node['Set Rate Limit Configuration'].json.maxRetries)}}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-retry-eligibility",
      "name": "Check Retry Eligibility",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "retryCount",
              "value": "={{parseInt($json.retryCount) + 1}}"
            },
            {
              "name": "currentDelay",
              "value": "={{Math.min(parseInt($json.currentDelay) * 2, parseInt($node['Set Rate Limit Configuration'].json.maxDelay))}}"
            },
            {
              "name": "retryAfter",
              "value": "={{$json.headers['retry-after'] || $json.headers['Retry-After'] || $json.currentDelay}}"
            },
            {
              "name": "waitTime",
              "value": "={{Math.max(parseInt($json.retryAfter), parseInt($json.currentDelay))}}"
            },
            {
              "name": "requestId",
              "value": "={{$json.requestId}}"
            },
            {
              "name": "lastRequestTime",
              "value": "={{$json.lastRequestTime}}"
            }
          ]
        },
        "options": {}
      },
      "id": "calculate-backoff",
      "name": "Calculate Exponential Backoff",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1560, 100]
    },
    {
      "parameters": {
        "amount": "={{parseInt($json.waitTime)}}",
        "unit": "milliseconds"
      },
      "id": "wait-before-retry",
      "name": "Wait Before Retry",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1780, 100]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "❌ Rate limit exceeded - Max retries reached"
            },
            {
              "name": "errorType",
              "value": "RATE_LIMIT_EXCEEDED"
            },
            {
              "name": "retryCount",
              "value": "={{$json.retryCount}}"
            },
            {
              "name": "maxRetries",
              "value": "={{$node['Set Rate Limit Configuration'].json.maxRetries}}"
            },
            {
              "name": "lastError",
              "value": "={{$json.message}}"
            },
            {
              "name": "timestamp",
              "value": "={{$now}}"
            }
          ]
        },
        "options": {}
      },
      "id": "handle-max-retries",
      "name": "Handle Max Retries Reached",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{$json.statusCode}}",
              "rightValue": 200,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "condition-2",
              "leftValue": "={{$json.statusCode}}",
              "rightValue": 299,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-success",
      "name": "Check API Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 600]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "✅ API request successful"
            },
            {
              "name": "statusCode",
              "value": "={{$json.statusCode}}"
            },
            {
              "name": "responseTime",
              "value": "={{$now.diff($json.lastRequestTime, 'milliseconds')}}ms"
            },
            {
              "name": "retryCount",
              "value": "={{$json.retryCount}}"
            },
            {
              "name": "requestId",
              "value": "={{$json.requestId}}"
            },
            {
              "name": "dataSize",
              "value": "={{JSON.stringify($json.body).length}} bytes"
            },
            {
              "name": "timestamp",
              "value": "={{$now}}"
            }
          ]
        },
        "options": {}
      },
      "id": "format-success-response",
      "name": "Format Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1560, 500]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "❌ API request failed"
            },
            {
              "name": "statusCode",
              "value": "={{$json.statusCode}}"
            },
            {
              "name": "errorType",
              "value": "API_ERROR"
            },
            {
              "name": "errorMessage",
              "value": "={{$json.message}}"
            },
            {
              "name": "retryCount",
              "value": "={{$json.retryCount}}"
            },
            {
              "name": "requestId",
              "value": "={{$json.requestId}}"
            },
            {
              "name": "timestamp",
              "value": "={{$now}}"
            }
          ]
        },
        "options": {}
      },
      "id": "format-error-response",
      "name": "Format Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1560, 700]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "logMessage",
              "value": "={{$json.status}}"
            },
            {
              "name": "requestId",
              "value": "={{$json.requestId}}"
            },
            {
              "name": "retryCount",
              "value": "={{$json.retryCount}}"
            },
            {
              "name": "statusCode",
              "value": "={{$json.statusCode}}"
            },
            {
              "name": "timestamp",
              "value": "={{$json.timestamp}}"
            }
          ]
        },
        "options": {}
      },
      "id": "log-final-result",
      "name": "Log Final Result",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1780, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set Rate Limit Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Rate Limit Configuration": {
      "main": [
        [
          {
            "node": "Initialize Retry State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Retry State": {
      "main": [
        [
          {
            "node": "Make API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make API Request": {
      "main": [
        [
          {
            "node": "Check Rate Limit Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Rate Limit Error": {
      "main": [
        [
          {
            "node": "Check Retry Eligibility",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check API Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Retry Eligibility": {
      "main": [
        [
          {
            "node": "Calculate Exponential Backoff",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Max Retries Reached",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Exponential Backoff": {
      "main": [
        [
          {
            "node": "Wait Before Retry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Before Retry": {
      "main": [
        [
          {
            "node": "Make API Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Success": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Max Retries Reached": {
      "main": [
        [
          {
            "node": "Log Final Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response": {
      "main": [
        [
          {
            "node": "Log Final Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error Response": {
      "main": [
        [
          {
            "node": "Log Final Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "rate-limit-error-handler",
      "name": "Rate Limit Error Handler"
    }
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "rate-limit-handling"
  },
  "id": "rate-limit-handling",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "rate-limit-handling",
      "name": "Rate Limit Handling"
    }
  ]
}
